{"version":3,"sources":["pkg.js"],"names":["bannerSymbol","bannerSignature","banner","packagesGlob","packagesTestsGlob","stylesGlob","babelGlob","task","src","pipe","dest","title","init","write","done","tasks","unshift","files","availableFiles","filter","it","indexExists","length","startsWith","run"],"mappings":";;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;;;AAEA,IAAMA,eAAe,GAArB;AACA,IAAMC,oDAA6CD,YAA7C,SAA4DA,YAA5D,6BAAN;AACA,IAAME,SAAS,qBAAWD,eAAX,EAA4BD,YAA5B,CAAf;AAEA,IAAMG,eAAe,mBAArB;AACA,IAAMC,oBAAoB,wBAA1B;AAEA,IAAMC,aAAa,oBAAnB;AAEA,IAAMC,YAAY,CAACH,YAAD,aAAmBC,iBAAnB,EAAlB;;AAEA,cAAKG,IAAL,CAAU,QAAV,EAAoB;AAAA,SAClB,cAAKC,GAAL,CAAS,cAAT,EACGC,IADH,CACQ,cAAKC,IAAL,CAAU,YAAV,CADR,CADkB;AAAA,CAApB;;AAKA,cAAKH,IAAL,CAAU,OAAV,EAAmB;AAAA,SACjB,cAAKC,GAAL,CAAS,KAAT,EACGC,IADH,CACQ,uBADR,EAEGA,IAFH,CAEQ,wBAAM;AAAEE,WAAO;AAAT,GAAN,CAFR,EAGGF,IAHH,CAGQ,yBAAOP,MAAP,CAHR,EAIGO,IAJH,CAIQ,cAAKC,IAAL,CAAU,IAAV,CAJR,CADiB;AAAA,CAAnB;;AAQA,cAAKH,IAAL,CAAU,SAAV,EAAqB;AAAA,SACnB,cAAKC,GAAL,CAASH,UAAT,EACGI,IADH,CACQ,wBAAM;AAAEE,WAAO;AAAT,GAAN,CADR,EAEGF,IAFH,CAEQ,2BAFR,EAGGA,IAHH,CAGQ,cAAKC,IAAL,CAAU,KAAV,CAHR,CADmB;AAAA,CAArB;;AAOA,cAAKH,IAAL,CAAU,OAAV,EAAmB;AAAA,SACjB,cAAKC,GAAL,CAASF,SAAT,EACGG,IADH,CACQ,wBAAM;AAAEE,WAAO;AAAT,GAAN,CADR,EAEGF,IAFH,CAEQ,wBAAWG,IAAX,EAFR,EAGGH,IAHH,CAGQ,yBAHR,EAIGA,IAJH,CAIQ,wBAAWI,KAAX,CAAiB,GAAjB,CAJR,EAKGJ,IALH,CAKQ,cAAKC,IAAL,CAAU,KAAV,CALR,CADiB;AAAA,CAAnB;;AASA,cAAKH,IAAL,CAAU,SAAV,EAAqB,UAACO,IAAD,EAAoB;AACvC,MAAMC,QAAQ,CAAC,OAAD,CAAd;;AACA,MAAI,oBAAW,qBAAX,CAAJ,EAAuC;AACrCA,UAAMC,OAAN,CAAc,SAAd;AACD;;AACD,MAAI,oBAAW,cAAX,CAAJ,EAAgC;AAC9BD,UAAMC,OAAN,CAAc,QAAd;AACD;;AAED,MAAMC,QAAQ,CAAC,gBAAD,EAAmB,iBAAnB,CAAd;AACA,MAAMC,iBAAiBD,MAAME,MAAN,CAAa,UAACC,EAAD;AAAA,WAAyB,oBAAWA,EAAX,CAAzB;AAAA,GAAb,CAAvB;AACA,MAAMC,cAAcH,eAAeI,MAAf,GAAwB,CAA5C;;AACA,MAAI,CAACD,WAAD,IACDA,eAAeH,eAAeC,MAAf,CACd,UAACC,EAAD;AAAA,WAAyB,sBAAaA,EAAb,EAAiB,OAAjB,EAA0BG,UAA1B,CAAqCrB,MAArC,CAAzB;AAAA,GADc,EAEdoB,MAFc,GAEL,CAHb,EAIE;AACAP,UAAMC,OAAN,CAAc,OAAd;AACD;;AAED,qCAAYD,KAAZ,SAAmB;AAAA,WAAMD,MAAN;AAAA,GAAnB;AACD,CArBD;;AAuBA,cAAKP,IAAL,CAAU,aAAV,EAAyB;AAAA,SACvB,wBAAMD,SAAN,EAAiB;AAAA,WAAM,cAAKkB,GAAL,CAAS,SAAT,CAAN;AAAA,GAAjB,CADuB;AAAA,CAAzB;;AAGA,cAAKjB,IAAL,CAAU,KAAV,EAAiB,CAAC,SAAD,EAAY,aAAZ,CAAjB","sourcesContent":["// @flow\n\nimport gulp from 'gulp';\nimport babel from 'gulp-babel';\nimport sourcemaps from 'gulp-sourcemaps';\nimport watch from 'gulp-watch';\nimport copy from 'gulp-copy';\nimport debug from 'gulp-debug';\nimport index from 'index-js';\nimport header from 'gulp-header';\nimport postcss from 'gulp-postcss';\nimport sequence from 'run-sequence';\n\nimport { existsSync, readFileSync } from 'fs';\n\nimport makeBanner from './banner';\n\nconst bannerSymbol = '*';\nconst bannerSignature = `Automatically generated ${bannerSymbol}${bannerSymbol} DO NOT ALTER THE BANNER`;\nconst banner = makeBanner(bannerSignature, bannerSymbol);\n\nconst packagesGlob = 'src/**/*.{js,jsx}';\nconst packagesTestsGlob = 'src/**/*.spec.{js,jsx}';\n\nconst stylesGlob = 'src/**/*.{css,sss}';\n\nconst babelGlob = [packagesGlob, `!${packagesTestsGlob}`];\n\ngulp.task('assets', () =>\n  gulp.src('src/assets/*')\n    .pipe(gulp.dest('lib/assets'))\n);\n\ngulp.task('index', () =>\n  gulp.src('src')\n    .pipe(index())\n    .pipe(debug({ title: 'Index Files' }))\n    .pipe(header(banner))\n    .pipe(gulp.dest('./'))\n  );\n\ngulp.task('postcss', () =>\n  gulp.src(stylesGlob)\n    .pipe(debug({ title: 'PostCSS Files' }))\n    .pipe(postcss())\n    .pipe(gulp.dest('lib'))\n);\n\ngulp.task('babel', () =>\n  gulp.src(babelGlob)\n    .pipe(debug({ title: 'Babel Files' }))\n    .pipe(sourcemaps.init())\n    .pipe(babel())\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest('lib'))\n  );\n\ngulp.task('default', (done: Function) => {\n  const tasks = ['babel'];\n  if (existsSync('./postcss.config.js')) {\n    tasks.unshift('postcss');\n  }\n  if (existsSync('./src/assets')) {\n    tasks.unshift('assets');\n  }\n\n  const files = ['./src/index.js', './src/index.jsx'];\n  const availableFiles = files.filter((it: string): boolean => existsSync(it));\n  const indexExists = availableFiles.length > 0;\n  if (!indexExists ||\n    (indexExists && availableFiles.filter(\n      (it: string): boolean => readFileSync(it, 'utf-8').startsWith(banner),\n    ).length > 0)\n  ) {\n    tasks.unshift('index');\n  }\n\n  sequence(...tasks, () => done());\n});\n\ngulp.task('babel:watch', () =>\n  watch(babelGlob, () => gulp.run('default')));\n\ngulp.task('dev', ['default', 'babel:watch']);\n"],"file":"pkg.js"}